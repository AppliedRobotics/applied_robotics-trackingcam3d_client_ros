#! /usr/bin/env python

PACKAGE='depthimage_to_laserscan'

from dynamic_reconfigure.parameter_generator_catkin import *
from math import pi
from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, int_t, double_t, str_t, bool_t


gen = ParameterGenerator()
#       Name                    Type      Reconfiguration level             Description                                                            Default    Min   Max
gen.add("scan_height",          int_t,    0,                                "Height of the laser band (in pixels).",                            1,      1,   500)
gen.add("scan_time",            double_t, 0,                                "Time for the entire scan sweep.",                                  0.033,  0.0, 1.0)
gen.add("range_min",            double_t, 0,                                "Minimum reported range (in meters).",                              0.45,   0.0, 10.0)
gen.add("range_max",            double_t, 0,                                "Maximum reported range (in meters).",                              10.0,   0.0, 10.0)
gen.add("output_frame_id",      str_t,    0,                                "Output frame_id for the laserscan.",   "camera_depth_frame")
method_enum = gen.enum([ 	gen.const("nearest_by_cols", 	int_t, 0, ""),
                                gen.const("nearest_2d", 	int_t, 1, "")],
                     		"An enum to set nearest good pixel search method")
gen.add("method", int_t, 0, "Nearest good pixel search method", 0, 0, 1, edit_method=method_enum)

optimization_enum = gen.enum([ 	gen.const("no", 	int_t, 0, ""),
                                gen.const("simd128", 	int_t, 1, "")],
                     		"An enum to set optimization")
gen.add("optimization", int_t, 0, "Optimization type", 0, 0, 1, edit_method=optimization_enum)

gen.add("performance_monitor_level", int_t, 0, "Performance monitor level", 0, 0, 1)
exit(gen.generate(PACKAGE, "depthimage_to_laserscan", "Depth"))